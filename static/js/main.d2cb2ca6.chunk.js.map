{"version":3,"sources":["Norms.js","Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Norms","this","props","link","className","contenteditable","React","Component","Timer","undefined","state","time_in_minutes","timer_interval","handleChange","bind","timer","event","setState","target","value","clearInterval","time","document","getElementById","innerHTML","String","distance","countDownDate","Date","now","parseInt","setInterval","minutes","Math","floor","seconds","padStart","id","type","onChange","onClick","App","changeLink","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d2cb2ca6.chunk.js","sourcesContent":["import React from \"react\";\nimport './Norms.css';\n\n\nexport default class Norms extends React.Component {\n  render() {\n    if (this.props.link !== \"norms\") {\n      return (\n        <div/>\n      );\n    }\n    return (\n      <div className=\"title\">\n        <h4 className=\"header\">Classroom Norms:</h4>\n\n        <div className=\"norms\" contenteditable=\"false\">\n          <ul>\n            <li>Follow NJITâ€™s code of ethics</li>\n            <li>Mute yourself</li>\n            <li>Put pronouns as part of your Zoom names</li>\n            <li>Raise hand or type in chat for questions</li>\n            <li>We strongly encourage turning on video, so you feel present in the classroom</li>\n            <li>Be respectful</li>\n            <li>7 minute break on the hour mark</li>\n          </ul>\n        </div>\n\n        <h5 className=\"header2\">After Learning Git</h5>\n\n        <div className=\"norms\" contenteditable=\"false\">\n          <ul>\n            <li>Have the Activity cloned locally before every class so you can follow along with us</li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport './Timer.css';\n\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (this.state === undefined || this.state.time_in_minutes === undefined) {\n      this.state = {\n        time_in_minutes: 7,\n        timer_interval: null\n      };\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.timer = this.timer.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({time_in_minutes: event.target.value});\n  }\n\n  timer() {\n    if (this.state.timer_interval != null) {\n      clearInterval(this.state.timer_interval);\n    }\n\n    let time = this.state.time_in_minutes;\n    document.getElementById(\"timer\").innerHTML = String(time) + \":00\";\n\n    const start = Date.now();\n    const delta = parseInt(time) * 60000;  // time # of minutes\n    const countDownDate = start + delta;\n    let distance;\n\n    // Update each second\n    this.setState({\n      timer_interval: setInterval(function() {\n        // If still on the Timer page\n        if (document.getElementById(\"timer\") !== null) {\n          distance = countDownDate - Date.now();\n\n          var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n          var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n          // Set value in HTML\n          document.getElementById(\"timer\").innerHTML = String(minutes) + \":\" + String(seconds).padStart(2, \"0\");\n\n          // If the count down is finished, write some text\n          if (distance <= 0) {\n            if (this.state !== undefined) {\n              clearInterval(this.state.timer_interval);\n            }\n            document.getElementById(\"timer\").innerHTML = \"Class Time!\";\n          }\n        }\n      }, 1000)\n    });\n  };\n\n  render() {\n    if (this.props.link !== \"timer\") {\n      return (\n        <div/>\n      );\n    }\n    return (\n      <div className=\"title\">\n        <h2 className=\"break_timer\">Break Timer:</h2>\n\n        <label id=\"label\">\n          Time:\n          <input type=\"text\" value={this.state.time_in_minutes} onChange={this.handleChange} />\n        </label>\n        <button onClick={this.timer}>Start</button>\n\n        <h1 id=\"timer\">7:00</h1>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Norms from \"./Norms\";\nimport Timer from \"./Timer\";\nimport \"./App.css\";\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      link: \"timer\"\n    };\n\n    this.changeLink = this.changeLink.bind(this);\n  }\n\n  changeLink(event) {\n    this.setState({link: event.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"navbar\">\n          <button className=\"pageLink\" onClick={this.changeLink} value=\"timer\">Timer</button>\n          <button className=\"pageLink\" onClick={this.changeLink} value=\"norms\">Class Norms</button>\n          <button className=\"pageLink\" onClick={this.changeLink} value=\"nothing\">Nothing</button>\n        </div>\n        <Timer link={this.state.link}/>\n        <Norms link={this.state.link}/>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}